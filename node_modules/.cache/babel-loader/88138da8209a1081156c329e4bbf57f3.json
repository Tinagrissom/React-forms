{"ast":null,"code":"var _jsxFileName = \"/Users/Tina/Downloads/01-starting-project7/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\"); // updating enteredName with setEnteredName on change\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [formIsValid, setFormIsValid] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      setFormIsValid(true);\n    } else {\n      setFormIsValid(false);\n    }\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value); // if (event.target.value.trim() !== \"\") {\n    //   setEnteredNameIsValid(true);\n    // }\n    // clears the error message on first keystroke\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true); // if (enteredName.trim() === \"\") {\n    //   setEnteredNameIsValid(false);\n    // }\n    // displays error message if input field is clicked and then clicked out of\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // will stop default behavior of browser to sned http request to server\n\n    setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    } // displays error message if form is submitted and input is empty\n\n\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value; // react refs always has a current property that points at input element\n\n    console.log(enteredValue); // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n\n    setEnteredName('');\n    setEnteredNameTouched(false);\n  }; // In reality wouldn't do both ref and state to get input, differences below\n  // Refs read value when needed\n  // State will log every key stroke\n  // If you want to read data only when form is submitted - ref might be better\n  // If you need entered value for instant validation - state might be better\n  // State can also reset entered input\n\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"qw6sw13abgu16Z0/EQYHrfoh0CY=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/Tina/Downloads/01-starting-project7/src/components/SimpleInput.js"],"names":["useRef","useState","useEffect","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","formIsValid","setFormIsValid","enteredNameIsValid","trim","nameInputIsInvalid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","formSubmissionHandler","preventDefault","console","log","enteredValue","current","nameInputClasses"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,YAAY,GAAGL,MAAM,EAA3B;AAEA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C,CAH6B,CAI7B;AACA;;AACA,QAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,KAAD,CAA9C;AAEA,QAAMW,kBAAkB,GAAGN,WAAW,CAACO,IAAZ,OAAuB,EAAlD;AACA,QAAMC,kBAAkB,GAAG,CAACF,kBAAD,IAAuBJ,kBAAlD;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,kBAAJ,EAAwB;AACtBD,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD,KAFD,MAEO;AACLA,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD;AACF,GANQ,EAMN,CAACC,kBAAD,CANM,CAAT;;AAQA,QAAMG,sBAAsB,GAAIC,KAAD,IAAW;AACxCT,IAAAA,cAAc,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd,CADwC,CAGxC;AACA;AACA;AACA;AACD,GAPD;;AASA,QAAMC,oBAAoB,GAAIH,KAAD,IAAW;AACtCP,IAAAA,qBAAqB,CAAC,IAAD,CAArB,CADsC,CAGtC;AACA;AACA;AACA;AACD,GAPD;;AASA,QAAMW,qBAAqB,GAAIJ,KAAD,IAAW;AACvCA,IAAAA,KAAK,CAACK,cAAN,GADuC,CAEvC;;AAEAZ,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAI,CAACG,kBAAL,EAAyB;AACvB;AACD,KARsC,CASvC;;;AAEAU,IAAAA,OAAO,CAACC,GAAR,CAAYjB,WAAZ;AACA,UAAMkB,YAAY,GAAGnB,YAAY,CAACoB,OAAb,CAAqBP,KAA1C,CAZuC,CAavC;;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ,EAduC,CAgBvC;;AACAjB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD,GAnBD,CAtC6B,CA2D7B;AACA;AACA;AAEA;AACA;AACA;;;AAEA,QAAMiB,gBAAgB,GAAGZ,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;AAIA,sBACE;AAAM,IAAA,QAAQ,EAAEM,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEM,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,GAAG,EAAErB,YADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,EAAE,EAAC,MAHL;AAIE,QAAA,QAAQ,EAAEU,sBAJZ;AAKE,QAAA,MAAM,EAAEI,oBALV;AAME,QAAA,KAAK,EAAEb;AANT;AAAA;AAAA;AAAA;AAAA,cAFF,EAUGQ,kBAAkB,iBACjB;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAE,CAACJ,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CA7FD;;GAAMP,W;;KAAAA,W;AA+FN,eAAeA,WAAf","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  // updating enteredName with setEnteredName on change\n  // const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      setFormIsValid(true);\n    } else {\n      setFormIsValid(false)\n    }\n  }, [enteredNameIsValid])\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n\n    // if (event.target.value.trim() !== \"\") {\n    //   setEnteredNameIsValid(true);\n    // }\n    // clears the error message on first keystroke\n  };\n\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n\n    // if (enteredName.trim() === \"\") {\n    //   setEnteredNameIsValid(false);\n    // }\n    // displays error message if input field is clicked and then clicked out of\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    // will stop default behavior of browser to sned http request to server\n\n    setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n    // displays error message if form is submitted and input is empty\n\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    // react refs always has a current property that points at input element\n    console.log(enteredValue);\n\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n    setEnteredName('');\n    setEnteredNameTouched(false);\n  };\n\n  // In reality wouldn't do both ref and state to get input, differences below\n  // Refs read value when needed\n  // State will log every key stroke\n\n  // If you want to read data only when form is submitted - ref might be better\n  // If you need entered value for instant validation - state might be better\n  // State can also reset entered input\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n        {/* sets button to be unclickable based on boolean value */}\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}
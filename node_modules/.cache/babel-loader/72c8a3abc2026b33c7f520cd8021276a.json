{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value); // if (event.target.value.trim() !== \"\") {\n    //   setEnteredNameIsValid(true);\n    // }\n    // clears the error message on first keystroke\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true); // if (enteredName.trim() === \"\") {\n    //   setEnteredNameIsValid(false);\n    // }\n    // displays error message if input field is clicked and then clicked out of\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError: hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"qlnmfbTzj9Q0H+uTzI/AGYgwaf8=\");\n\nexport default useInput; // custom hook used to manage state and login for input\n// value, touched state, validity, validation information should be passed on from\n// outside, to make this hook reusable","map":{"version":3,"sources":["/Users/Tina/Downloads/01-starting-project7/src/hooks/use-input.js"],"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAClC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGL,aAAa,CAACC,YAAD,CAAlC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AACpCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf,CADoC,CAGpC;AACA;AACA;AACA;AACD,GAPD;;AASA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAClCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ,CADkC,CAGlC;AACA;AACA;AACA;AACD,GAPD;;AASA,QAAMQ,KAAK,GAAG,MAAM;AAChBV,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAKA,SAAO;AACLM,IAAAA,KAAK,EAAET,YADF;AAELY,IAAAA,OAAO,EAAER,YAFJ;AAGLC,IAAAA,QAAQ,EAAEA,QAHL;AAILC,IAAAA,kBAJK;AAKLI,IAAAA,gBALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CAtCD;;GAAMb,Q;;AAwCN,eAAeA,QAAf,C,CAEA;AACA;AACA","sourcesContent":["import { useState } from \"react\";\n\nconst useInput = (validateValue) => {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = (event) => {\n    setEnteredValue(event.target.value);\n\n    // if (event.target.value.trim() !== \"\") {\n    //   setEnteredNameIsValid(true);\n    // }\n    // clears the error message on first keystroke\n  };\n\n  const inputBlurHandler = (event) => {\n    setIsTouched(true);\n\n    // if (enteredName.trim() === \"\") {\n    //   setEnteredNameIsValid(false);\n    // }\n    // displays error message if input field is clicked and then clicked out of\n  };\n\n  const reset = () => {\n      setEnteredValue('');\n      setIsTouched(false);\n  }\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError: hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\nexport default useInput;\n\n// custom hook used to manage state and login for input\n// value, touched state, validity, validation information should be passed on from\n// outside, to make this hook reusable\n"]},"metadata":{},"sourceType":"module"}
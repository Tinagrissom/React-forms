{"ast":null,"code":"var _jsxFileName = \"/Users/Tina/Downloads/01-starting-project7/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n  const nameInputRef = useRef();\n  const [enteredEmail, setenteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = enteredEmail.includes(\"@\");\n  const enteredEmailIsInValid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const emailInputChangeHandler = event => {\n    setenteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // will stop default behavior of browser to sned http request to server\n\n    if (!enteredNameIsValid) {\n      return;\n    } // displays error message if form is submitted and input is empty\n\n\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value; // react refs always has a current property that points at input element\n\n    console.log(enteredValue); // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n\n    resetNameInput();\n    setenteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  }; // In reality wouldn't do both ref and state to get input, differences below\n  // Refs read value when needed\n  // State will log every key stroke\n  // If you want to read data only when form is submitted - ref might be better\n  // If you need entered value for instant validation - state might be better\n  // State can also reset entered input\n\n\n  const nameInputClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = enteredEmailIsInValid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your E-Mail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), enteredEmailIsInValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Please enter a valid email.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"RQRGWYySv7nICWzs7CwtEEmlozM=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/Tina/Downloads/01-starting-project7/src/components/SimpleInput.js"],"names":["useRef","useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","nameInputRef","enteredEmail","setenteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","includes","enteredEmailIsInValid","formIsValid","emailInputChangeHandler","event","target","emailInputBlurHandler","formSubmissionHandler","preventDefault","console","log","enteredValue","current","nameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["import { useRef, useState } from \"react\";\n\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n\n  const nameInputRef = useRef();\n\n  const [enteredEmail, setenteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  const enteredEmailIsValid = enteredEmail.includes(\"@\");\n  const enteredEmailIsInValid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const emailInputChangeHandler = (event) => {\n    setenteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = (event) => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    // will stop default behavior of browser to sned http request to server\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n    // displays error message if form is submitted and input is empty\n\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    // react refs always has a current property that points at input element\n    console.log(enteredValue);\n\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n    resetNameInput();\n\n    setenteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  // In reality wouldn't do both ref and state to get input, differences below\n  // Refs read value when needed\n  // State will log every key stroke\n\n  // If you want to read data only when form is submitted - ref might be better\n  // If you need entered value for instant validation - state might be better\n  // State can also reset entered input\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = enteredEmailIsInValid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"email\">Your E-Mail</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {enteredEmailIsInValid && (\n          <p className=\"error-text\">Please enter a valid email.</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n        {/* sets button to be unclickable based on boolean value */}\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}